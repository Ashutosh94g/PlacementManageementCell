//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "pg")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub qualification_id: i32,
    pub specialization_id: i32,
    pub startyear: i32,
    pub endyear: i32,
    pub cgpa: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::qualification::Entity",
        from = "Column::QualificationId",
        to = "super::qualification::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Qualification,
    #[sea_orm(
        belongs_to = "super::specialization::Entity",
        from = "Column::SpecializationId",
        to = "super::specialization::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Specialization,
    #[sea_orm(has_many = "super::student::Entity")]
    Student,
}

impl Related<super::qualification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Qualification.def()
    }
}

impl Related<super::specialization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Specialization.def()
    }
}

impl Related<super::student::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Student.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
