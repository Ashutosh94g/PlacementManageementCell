//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "student")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub personal_id: i32,
    pub family_id: i32,
    pub pg_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::family::Entity",
        from = "Column::FamilyId",
        to = "super::family::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Family,
    #[sea_orm(
        belongs_to = "super::personal::Entity",
        from = "Column::PersonalId",
        to = "super::personal::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Personal,
    #[sea_orm(
        belongs_to = "super::pg::Entity",
        from = "Column::PgId",
        to = "super::pg::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Pg,
}

impl Related<super::family::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Family.def()
    }
}

impl Related<super::personal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Personal.def()
    }
}

impl Related<super::pg::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pg.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
